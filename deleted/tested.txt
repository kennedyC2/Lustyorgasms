// Category video fetcher
const categoryVideoFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&category=tits&output=json&page=2&thumbsize=medium')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        categoryVideoFetcher();
// ================================================================================================
        var request = https.get('https://api.redtube.com/?data=redtube.Categories.getCategoriesList&output=json', (res) => {   
        res.on('data', (data) => {
            receivedData = JSON.parse(data.toString());
            console.log(receivedData);
            var straight = receivedData.categories;
            var gay = receivedData.categories_gay;
            callback(false, straight, gay);
        }); 
    });

    // Bind error, so that it doesn't get thrown
    request.on('error', (e) => {
        callback(e);
    });

    // End request
    request.end();
// ==================================================================================================

// Category fetcher
const categoryFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Categories.getCategoriesList&output=json')
            .then(data => data.json())
            .then(da => {
                //console.log(da.categories)
                console.log('Straight category includes the following:');
                for (const prop of da.categories) {
                    console.log(prop.category);
                };

                console.log('\n' + 'Gay category includes the following:');
                for (const prop of da.categories_gay) {
                    console.log(prop.category);
                };
            });
        }

        categoryFetcher();

// Fetch newest Videos
const newestFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&ordering=newest&thumbsize=medium&page=3')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        newestFetcher();

// Fetcher for most viewed Videos
const mostViewedFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&ordering=mostviewed&thumbsize=medium&page=3')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        mostViewedFetcher();

// top rated video fetcher
const topRatedVideoFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&ordering=rating&thumbsize=medium')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        topRatedVideoFetcher();

// fetch recommended Videos
const recommendedVideoFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&ordering=recommended&thumbsize=medium')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        recommendedVideoFetcher();

// fetch porn star
const pornStarFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Stars.getStarDetailedList&output=json&page=2')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        pornStarFetcher();

// Fetch video by porn star name
const pornStarVideoFetcher = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&stars[]=Aimee Tyler&thumbsize=medium')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        pornStarVideoFetcher();

// Search video through search bar
 const searchVideo = function (){
            fetch('https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search=amateur&thumbsize=medium')
            .then(data => data.json())
            .then(da => console.log(da));
        }

        searchVideo();




        



else if (!err && videoData && num < 20) {
    // Define template data for interpolation
    templateData = {
        'head.title' : 'kenHUB',
        'head.description' : 'XXX videos, Sex videos, Pornography, Kamasutra',
        'body.class' : 'search',
        'body.straight' : straight,
        'body.gay' : gay,
        'ipBody.straight' : straight,
        'ipBody.gay' : gay,
        'dpBody.straight' : straight,
        'dpBody.gay' : gay,
        'body.type' : type,
        'body.keyword' : keyword,
        'body.videoData' : videoData,
        'body.hide' : 'hide',
        'body.page' : nextPage+=1
    };

    // Get template string
    helpers.getTemplate('search', templateData, function (err, templateString) {
        if (!err && templateString) {
            // Get full template
            helpers.getFullTemplate(templateString, templateData, function (err, fullString) {
                if (!err && fullString) {
                    callback(200, fullString, 'html');
                } else {
                    callback(500, undefined, 'html');
                }
            });
        } else {
            callback(500, undefined, 'html');
        }
    });
} else {
    callback(500, undefined, 'html');
}




// handler.categoryQuery
// ==========================================================================================
handler.categoryQuery = (data, callback) => {
	if (data.method == "get") {
		// Define Collectables
		var path = typeof data.trimmedPath !== undefined ? data.trimmedPath : false;
		console.log(path);
		var page = typeof data.queryStringObject.p !== undefined ? parseInt(data.queryStringObject.p) : false;
		if (page && path) {
			var query = path.split("/")[1];
			// Fetch data
			videoByCategory(query, page, (err, list) => {
				if (!err && list) {
					// Define Template Data
					var templateData = {
						"body.one": list,
						"body.two": list,
						"body.three": list,
						"body.page": page + 1,
						"body.category": query,
					};

					// Get Template
					getTemplate("category", templateData, (err, template) => {
						if (!err && template) {
							callback(200, template, "html");
						} else {
							callback(500, undefined, "html");
						}
					});
				} else {
					callback(500, undefined, "html");
				}
			});
		} else {
			callback(400, undefined, "html");
		}
	} else {
		callback(405);
	}
};



// handler.tagQuery
// ==========================================================================================
handler.tagQuery = (data, callback) => {
	if (data.method == "get") {
		// Define Collectables
		var path = typeof data.trimmedPath !== undefined ? data.trimmedPath : false;
		var p = data.queryStringObject.p || data.queryStringObject.page;
		var page = typeof p !== undefined ? parseInt(p) : false;
		if (page && path) {
			var query = path.split("/")[1];
			// Fetch data
			videoByTags(query, page, (err, list) => {
				if (!err && list) {
					// Define Template Data
					var templateData = {
						"body.one": list,
						"body.two": list,
						"body.three": list,
						"body.page": (page += 1),
						"body.query": query,
					};

					// Get Template
					getTemplate("tagVideo", templateData, (err, template) => {
						if (!err && template) {
							callback(200, template, "html");
						} else {
							callback(500, undefined, "html");
						}
					});
				} else {
					callback(500, undefined, "html");
				}
			});
		} else {
			callback(400, undefined, "html");
		}
	} else {
		callback(405);
	}
};




// MostViewed
fetchData.listVideos_mv = (include, page, callback) => {
	if (include) {
		var count = 0;
		// Instantiate request
		fetch("https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search=hard&ordering=mostviewed&thumbsize=big&page=" + page, (err, response) => {
			if (!err && response) {
				var videoData = response.videos;
				var num = response.count;
				var data = "";
				// include count in id
				for (const d of videoData) {
					data += `<div class="outer-wrapper a${(count += 1)}">
						<div class="thumb-wrapper">
						<a href="view/${d.video.video_id}"><img data-src="${d.video.thumb}" referrerpolicy="no-referrer" alt="thumbnail" width="100%" height="100%"/></a>
							<div class="time">${d.video.duration}</div>
						</div>
				
						<div class="info-wrapper">
							<div class="title" title="${d.video.title}">${d.video.title}</div>
							<div class="lk-vw">
								<div class="views">
									<img src="public/images/eye.svg" alt="views">
									<p>${d.video.views}</p>
								</div>
								<div class="likes">
									<img src="public/images/like.svg" alt="likes">
									<p>${Math.round(d.video.rating)}%</p>
								</div>
							</div>
						</div>
					</div>

					`;
				}
				// console.log(num);
				callback(false, data, num);
			} else {
				console.log(err);
			}
		});
	} else {
		// Instantiate request
		fetch("https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search=hard&ordering=mostviewed&thumbsize=big&page=" + page, (err, response) => {
			if (!err && response) {
				var videoData = response.videos;
				var num = response.count;
				var data = "";
				var count = 0;
				for (const d of videoData) {
					data += `<div class="outer-wrapper a${(count += 1)}">
						<div class="thumb-wrapper">
						<a href="view/${d.video.video_id}"><img data-src="${d.video.thumb}" referrerpolicy="no-referrer" alt="thumbnail" width="100%" height="100%"/></a>
							<div class="time">${d.video.duration}</div>
						</div>
				
						<div class="info-wrapper">
							<div class="title" title="${d.video.title}">${d.video.title}</div>
							<div class="lk-vw">
								<div class="views">
									<img src="public/images/eye.svg" alt="views">
									<p>${d.video.views}</p>
								</div>
								<div class="likes">
									<img src="public/images/like.svg" alt="likes">
									<p>${Math.round(d.video.rating)}%</p>
								</div>
							</div>
						</div>
					</div>

					`;
				}
				//console.log(data);
				callback(false, data, num);
			} else {
				console.log(err);
			}
		});
	}
};

// TopRated
fetchData.listVideos_rt = (include, page, callback) => {
	if (include) {
		var count = 0;
		// Instantiate request
		fetch("https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search=hard&ordering=rating&thumbsize=big&page=" + page, (err, response) => {
			if (!err && response) {
				var videoData = response.videos;
				var num = response.count;
				var data = "";
				// include count in id
				for (const d of videoData) {
					data += `<div class="outer-wrapper a${(count += 1)}">
						<div class="thumb-wrapper">
						<a href="view/${d.video.video_id}"><img data-src="${d.video.thumb}" referrerpolicy="no-referrer" alt="thumbnail" width="100%" height="100%"/></a>
							<div class="time">${d.video.duration}</div>
						</div>
				
						<div class="info-wrapper">
							<div class="title" title="${d.video.title}">${d.video.title}</div>
							<div class="lk-vw">
								<div class="views">
									<img src="public/images/eye.svg" alt="views">
									<p>${d.video.views}</p>
								</div>
								<div class="likes">
									<img src="public/images/like.svg" alt="likes">
									<p>${Math.round(d.video.rating)}%</p>
								</div>
							</div>
						</div>
					</div>

					`;
				}
				// console.log(num);
				callback(false, data, num);
			} else {
				console.log(err);
			}
		});
	} else {
		// Instantiate request
		fetch("https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search=hard&ordering=rating&thumbsize=big&page=" + page, (err, response) => {
			if (!err && response) {
				var videoData = response.videos;
				var num = response.count;
				var data = "";
				var count = 0;
				for (const d of videoData) {
					data += `<div class="outer-wrapper a${(count += 1)}">
						<div class="thumb-wrapper">
						<a href="view/${d.video.video_id}"><img data-src="${d.video.thumb}" referrerpolicy="no-referrer" alt="thumbnail" width="100%" height="100%"/></a>
							<div class="time">${d.video.duration}</div>
						</div>
				
						<div class="info-wrapper">
							<div class="title" title="${d.video.title}">${d.video.title}</div>
							<div class="lk-vw">
								<div class="views">
									<img src="public/images/eye.svg" alt="views">
									<p>${d.video.views}</p>
								</div>
								<div class="likes">
									<img src="public/images/like.svg" alt="likes">
									<p>${Math.round(d.video.rating)}%</p>
								</div>
							</div>
						</div>
					</div>

					`;
				}
				//console.log(data);
				callback(false, data, num);
			} else {
				console.log(err);
			}
		});
	}
};



var data = {
	method: "get",
	queryStringObject: {
		p: 1,
		pageLoad: Math.floor(Math.random() * 30) + 1,
	},
};

// Worker.loadPage
worker.loadPage = (callback) => {
	handler.home(data, function (status, fullString) {
		if (status == 200 && fullString) {
			fs.open(worker.templateDir + "templates" + "/" + "indexTemplate" + ".html", "r+", function (err, fileDescriptor) {
				if (!err && fileDescriptor) {
					// Truncate the file
					fs.ftruncate(fileDescriptor, function (err) {
						if (!err) {
							// Update old file with new one
							fs.writeFile(fileDescriptor, fullString, function (err) {
								if (!err) {
									// Close file
									fs.close(fileDescriptor, function (err) {
										if (!err) {
											callback(false, fullString);
										} else {
											callback("Could Not Close File");
										}
									});
								} else {
									callback("Could not Write file");
								}
							});
						} else {
							callback("Could Not Truncate File");
						}
					});
				} else {
					callback("Could Not Open File");
				}
			});
		} else console.log(err);
	});
};